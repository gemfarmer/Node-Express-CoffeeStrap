// Generated by CoffeeScript 1.6.3
(function() {
  var DB, app, config, db, express, home, isAdmin, moment, mongo, mongoStore, mongoose, passport, port, restrict, routes, storeConf;

  express = require('express');

  routes = require('./../routes/lib/home');

  mongoose = require('mongoose');

  mongo = require('mongodb');

  passport = require('./authentication');

  mongoStore = require('connect-mongo')(express);

  moment = require('moment');

  app = module.exports = express();

  global.app = app;

  config = require('./config.js');

  app.locals.config = config;

  DB = require('./database');

  db = new DB.startup('mongodb://localhost/' + config.dbname);

  storeConf = {
    db: {
      db: config.dbname,
      host: 'localhost'
    },
    secret: config.sessionSecret
  };

  app.locals.links = require('./navigation');

  app.locals.moment = moment;

  app.configure(function() {
    app.set('views', __dirname + '/../views');
    app.set('view engine', 'jade');
    app.use(function(req, res, next) {
      var current;
      current = req.path.split('/');
      res.locals.current = '/' + current[1];
      res.locals.url = 'http://' + req.get('host') + req.url;
      next();
    });
    app.use(express.bodyParser());
    app.use(express.cookieParser());
    app.use(express.methodOverride());
    app.use(express.session({
      secret: storeConf.secret,
      maxAge: new Date(Date.now() + 3600000),
      store: new mongoStore(storeConf.db)
    }));
    app.use(passport.initialize());
    app.use(passport.session());
    app.use(app.router);
    app.use(express["static"](__dirname + './../public'));
  });

  app.configure('development', function() {
    app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
  });

  app.configure('production', function() {
    app.use(express.errorHandler());
  });

  passport = require('passport');

  home = require('./../routes/lib/home');

  restrict = function(req, res, next) {
    if (req.user) {
      next();
    } else {
      res.redirect('/login');
    }
  };

  isAdmin = function(req, res, next) {
    if (req.user.role === 'admin') {
      next();
    } else {
      res.redirect('/');
    }
  };

  module.exports = function(app) {
    app.get('/', home.index);
    app.get('/login', home.login);
    app.post('/login', passport.authenticate('local', {
      failureRedirect: '/login'
    }, function(req, res) {
      res.redirect('/');
    }));
    app.get('/logout', restrict, home.logout);
    app.get('/about', home.about);
    app.get('/about/tos', home.tos);
    app.get('/register', home.getRegister);
    app.post('/register', home.postRegister);
    app.get('/checkExists', home.checkExists);
    app.get('/profile', restrict, home.profile);
  };

  port = config.port;

  app.listen(port, function() {
    console.log("Listening on " + port);
  });

}).call(this);
